| 寄存器 | 描述               |
| ------ | ------------------ |
| AX     | 累加结果数据       |
| BX     | 数据段数据指针     |
| CX     | 字符串和循环计数器 |
| DX     | I/O 指针           |
| DI     | 目的数据指针       |
| SI     | 源数据指针         |
| SP     | 栈指针             |
| BP     | 栈数据指针         |

| 寄存器 | 高八位 | 低八位 |
| ------ | ------ | ------ |
| AX     | AH     | AL     |
| BX     | BH     | BL     |
| CX     | CH     | CL     |
| DX     | DH     | DL     |

| 段寄存器 | 描述         |
| -------- | ------------ |
| CS       | 代码段寄存器 |
| DS       | 数据段寄存器 |
| SS       | 栈段寄存器   |
| ES       | 额外的寄存器 |

1.AX BX CX DX都是16位通用寄存器, 可以分为 xH,xL 两个8位寄存器; 并且还有其他特殊的用途

    1.1 AX--累加寄存器, 在使用指令DIV 和 MUL的时候会有特殊的操作。DX和AX组成32位结果, DX为高位, AX为高位
        DIV为除法, MUL为乘法
    1.2 BX--数据寄存器, 其有专属功能 寻址
    1.3 CX--循环计数器 若有loop则使用CX中的值, 每次循环减一


## 寻址方式
    立即寻址:
        mov AX, 1234H 将1234H赋给AX寄存器
    寄存器寻址:
        mov AX, 1234H
        mov SI, AX 将AX寄存器中的值赋给SI
    存储器寻址:
        直接寻址:
            mov BL, [1200H] 获取偏移地址为1200H对应的内容, 默认是在DS段
            mov BL, ES:[1200H] 是在ES段的偏移地址1200H的内容
        间接寻址: 只用使用BX, BP, SI, DI这四个寄存器
            mov AX, [SI] 先获取SI的值, 再获取偏移地址为SI的值的内容
                BX
                BP -> 默认在SS 其他都在DS段
                SI
                DI
        相对寻址:
            mov AX, DATA[SI] 表示DATA + [SI]   也就是DS:[DATA + SI]
                    [DATA + SI] [SI + DATA] [SI] + DATA 都是等价的
        基址寻址:
            基址BX/BP BX->DS段  BP->SS段 
            mov AX， [BX + 5]
        变址寻址:
            变址DI/SI 都在DS段
            mov AX， [DI + 5]
        基址变址寻址:
            mov AX, [BX/BP][SI/DI] -> [BX/BP + SI/DI] 
        
        基址变址相对寻址:
            mov AX, [BX/BP + SI/DI] + 8/16 bit
        隐含寻址:

## 转移指令
    CS:IP 下一条指令的地址, 物理地址 = CS << 4 (高位) + ip

    jmp short start 占用两个字节, 一个字节表示jmp  另外表示数量
    jmp near start 占用三个字节, 
    jmp far =>  jmp 0:0x7c00

    条件转移:

## 堆栈和函数
    程序的堆栈地址: cs:ip
    设置栈顶指针SP  堆栈SS

## 内中断和异常

call func => push ip; jmp func 
call far func => push cs; push ip; jmp func

中断向量表: 存放的是 函数调用 总共能放256个 其序号为0-255
0除法异常 0 - 3 

0x80 linux系统调用. 软中断 int 触发中断

注册中断 => push cs; push ip; push flag

## 输入输出
 
阴极射线管控制器
CRT 地址端口 0x3D4
CRT 数据端口 0x3D5

0x0E - 光标位置高八位
0x0F - 光标位置第八位

## 控制字符样式

- ASCII 码
- 字符样式

-- 

- 高四位表示背景色 | K | R | G | B |
- 低四位表示前景色 | I | R | G | B |

---

- K = 0 : 背景不闪烁
- K = 1 : 背景闪烁
- I = 0 : 深色字符
- I = 1 : 浅色字符

| Red | Green | Blue | Color   | 说明      |
| --- | ----- | ---- | ------- | --------- |
| 0   | 0     | 0    | Black   | 黑色      |
| 0   | 0     | 1    | Blue    | 蓝色      |
| 0   | 1     | 0    | Green   | 绿色      |
| 0   | 1     | 1    | Cyan    | 青色      |
| 1   | 0     | 0    | Red     | 红色      |
| 1   | 0     | 1    | Magenta | 洋红      |
| 1   | 1     | 0    | Yellow  | 黄色      |
| 1   | 1     | 1    | White   | 白色/灰色 |

## 外中断和时钟
